{
  "service": {
    "service": "madcamp3",
    "serviceObject": {
      "name": "madcamp3"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "ap-northeast-2",
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AsdfLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcamp3-dev-asdf"
            }
          },
<<<<<<< HEAD
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcamp3-dev-login"
=======
          "ConnectHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcamp3-dev-connectHandler"
            }
          },
          "DisconnectHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcamp3-dev-disconnectHandler"
            }
          },
          "OfferHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcamp3-dev-offerHandler"
            }
          },
          "AnswerHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcamp3-dev-answerHandler"
>>>>>>> master
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "madcamp3",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/madcamp3-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/madcamp3-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "madcamp3",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AsdfLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/madcamp3/dev/1720840560315-2024-07-13T03:16:00.315Z/madcamp3.zip"
=======
                "S3Key": "serverless/madcamp3/dev/1720844593027-2024-07-13T04:23:13.027Z/madcamp3.zip"
>>>>>>> master
              },
              "Handler": "src/handler.asdf",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcamp3-dev-asdf",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AsdfLogGroup"
            ]
          },
<<<<<<< HEAD
          "LoginLambdaFunction": {
=======
          "ConnectHandlerLambdaFunction": {
>>>>>>> master
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/madcamp3/dev/1720840560315-2024-07-13T03:16:00.315Z/madcamp3.zip"
              },
              "Handler": "src/login.kakao",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcamp3-dev-login",
=======
                "S3Key": "serverless/madcamp3/dev/1720844593027-2024-07-13T04:23:13.027Z/madcamp3.zip"
              },
              "Handler": "src/handler.connectHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcamp3-dev-connectHandler",
>>>>>>> master
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
<<<<<<< HEAD
              "LoginLogGroup"
            ]
          },
          "AsdfLambdaVersionnITOEP5c6CzN6uELM8pBts5wTR76biAdJ31dGRkDRP0": {
=======
              "ConnectHandlerLogGroup"
            ]
          },
          "DisconnectHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcamp3/dev/1720844593027-2024-07-13T04:23:13.027Z/madcamp3.zip"
              },
              "Handler": "src/handler.disconnectHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcamp3-dev-disconnectHandler",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DisconnectHandlerLogGroup"
            ]
          },
          "OfferHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcamp3/dev/1720844593027-2024-07-13T04:23:13.027Z/madcamp3.zip"
              },
              "Handler": "src/handler.offerHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcamp3-dev-offerHandler",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OfferHandlerLogGroup"
            ]
          },
          "AnswerHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcamp3/dev/1720844593027-2024-07-13T04:23:13.027Z/madcamp3.zip"
              },
              "Handler": "src/handler.answerHandler",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcamp3-dev-answerHandler",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AnswerHandlerLogGroup"
            ]
          },
          "AsdfLambdaVersionG6bxThRkdsxi2g3dS3nPlOcnQtgRncoF061dC6H6As": {
>>>>>>> master
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AsdfLambdaFunction"
              },
<<<<<<< HEAD
              "CodeSha256": "7LtDtnRnPOZm4l4ofOy+QWCbWUFHJ2M3rKna0sefnww="
            }
          },
          "LoginLambdaVersionUDEALGVWiy5C4c7ygLj9J1BmDAAw1xGBAEDpAmNmxg": {
=======
              "CodeSha256": "dGo/dgszuN3rXXx3tveFdyAR3yZsmMSO196MGEZh3I4="
            }
          },
          "ConnectHandlerLambdaVersionGyQ0tPzfN2QhhA5GCzzDnT76IB1na9sLQSq2v4EjAqU": {
>>>>>>> master
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
<<<<<<< HEAD
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "7LtDtnRnPOZm4l4ofOy+QWCbWUFHJ2M3rKna0sefnww="
=======
                "Ref": "ConnectHandlerLambdaFunction"
              },
              "CodeSha256": "dGo/dgszuN3rXXx3tveFdyAR3yZsmMSO196MGEZh3I4="
            }
          },
          "DisconnectHandlerLambdaVersionw9ttE08sUPcyqgOrc63itmVbeyKLAuTNH8IdQoo2UM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DisconnectHandlerLambdaFunction"
              },
              "CodeSha256": "dGo/dgszuN3rXXx3tveFdyAR3yZsmMSO196MGEZh3I4="
            }
          },
          "OfferHandlerLambdaVersionotJ8LNqYe6FdQ78odv6ZFe0SCVpnM6lIEqHxEDCYSM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OfferHandlerLambdaFunction"
              },
              "CodeSha256": "dGo/dgszuN3rXXx3tveFdyAR3yZsmMSO196MGEZh3I4="
            }
          },
          "AnswerHandlerLambdaVersionbjMfJwxcDt0lZzR48XoX1moRuUQUP7GgXcbIwYEXM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AnswerHandlerLambdaFunction"
              },
              "CodeSha256": "dGo/dgszuN3rXXx3tveFdyAR3yZsmMSO196MGEZh3I4="
>>>>>>> master
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-madcamp3",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAsdf": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "asdf",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOauth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "oauth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAsdfGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAsdf"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AsdfLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AsdfLambdaPermissionApiGateway"
            ]
          },
<<<<<<< HEAD
          "ApiGatewayMethodOauthGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOauth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1720840554475": {
=======
          "ApiGatewayDeployment1720844591676": {
>>>>>>> master
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAsdfGet",
              "ApiGatewayMethodOauthGet"
            ]
          },
          "AsdfLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AsdfLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
<<<<<<< HEAD
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
=======
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-madcamp3-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "ConnectHandlerWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
>>>>>>> master
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
<<<<<<< HEAD
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
=======
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ConnectHandlerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
>>>>>>> master
                  ]
                ]
              }
            }
<<<<<<< HEAD
=======
          },
          "DisconnectHandlerWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DisconnectHandlerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "OfferHandlerWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "OfferHandlerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "AnswerHandlerWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AnswerHandlerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "ConnectHandlerLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "ConnectHandlerLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConnectHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "DisconnectHandlerLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "DisconnectHandlerLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DisconnectHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "OfferHandlerLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "OfferHandlerLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OfferHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "AnswerHandlerLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "AnswerHandlerLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AnswerHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "ConnectHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "DisconnectHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "offerWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "offer",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "OfferHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "answerWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "answer",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "AnswerHandlerWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentOjLjrdgHCwbBshQTTmcHQWND82WSZZMUbHpFmqTHul0"
              }
            }
          },
          "WebsocketsDeploymentOjLjrdgHCwbBshQTTmcHQWND82WSZZMUbHpFmqTHul0": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "offerWebsocketsRoute",
              "answerWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
>>>>>>> master
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-madcamp3-dev-ServerlessDeploymentBucketName"
            }
          },
          "AsdfLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "AsdfLambdaVersionnITOEP5c6CzN6uELM8pBts5wTR76biAdJ31dGRkDRP0"
=======
              "Ref": "AsdfLambdaVersionG6bxThRkdsxi2g3dS3nPlOcnQtgRncoF061dC6H6As"
>>>>>>> master
            },
            "Export": {
              "Name": "sls-madcamp3-dev-AsdfLambdaFunctionQualifiedArn"
            }
          },
<<<<<<< HEAD
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionUDEALGVWiy5C4c7ygLj9J1BmDAAw1xGBAEDpAmNmxg"
            },
            "Export": {
              "Name": "sls-madcamp3-dev-LoginLambdaFunctionQualifiedArn"
=======
          "ConnectHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConnectHandlerLambdaVersionGyQ0tPzfN2QhhA5GCzzDnT76IB1na9sLQSq2v4EjAqU"
            },
            "Export": {
              "Name": "sls-madcamp3-dev-ConnectHandlerLambdaFunctionQualifiedArn"
            }
          },
          "DisconnectHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DisconnectHandlerLambdaVersionw9ttE08sUPcyqgOrc63itmVbeyKLAuTNH8IdQoo2UM"
            },
            "Export": {
              "Name": "sls-madcamp3-dev-DisconnectHandlerLambdaFunctionQualifiedArn"
            }
          },
          "OfferHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OfferHandlerLambdaVersionotJ8LNqYe6FdQ78odv6ZFe0SCVpnM6lIEqHxEDCYSM"
            },
            "Export": {
              "Name": "sls-madcamp3-dev-OfferHandlerLambdaFunctionQualifiedArn"
            }
          },
          "AnswerHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AnswerHandlerLambdaVersionbjMfJwxcDt0lZzR48XoX1moRuUQUP7GgXcbIwYEXM"
            },
            "Export": {
              "Name": "sls-madcamp3-dev-AnswerHandlerLambdaFunctionQualifiedArn"
>>>>>>> master
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-madcamp3-dev-ServiceEndpoint"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-madcamp3-dev-ServiceEndpointWebsocket"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "webpack": {
        "webpackConfig": "./webpack.config.js",
        "includeModules": true
      }
    },
    "plugins": [
      "serverless-webpack"
    ],
    "pluginsData": {},
    "functions": {
      "asdf": {
        "handler": "src/handler.asdf",
        "events": [
          {
            "http": {
              "path": "asdf",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "madcamp3-dev-asdf",
        "package": {
          "artifact": ".serverless/madcamp3.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "AsdfLambdaVersionnITOEP5c6CzN6uELM8pBts5wTR76biAdJ31dGRkDRP0"
      },
      "login": {
        "handler": "src/login.kakao",
        "events": [
          {
            "http": {
              "path": "oauth",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "madcamp3-dev-login",
        "package": {
          "artifact": ".serverless\\madcamp3.zip"
=======
        "versionLogicalId": "AsdfLambdaVersionG6bxThRkdsxi2g3dS3nPlOcnQtgRncoF061dC6H6As"
      },
      "connectHandler": {
        "handler": "src/handler.connectHandler",
        "events": [
          {
            "websocket": "$connect"
          }
        ],
        "name": "madcamp3-dev-connectHandler",
        "package": {
          "artifact": ".serverless/madcamp3.zip"
>>>>>>> master
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "LoginLambdaVersionUDEALGVWiy5C4c7ygLj9J1BmDAAw1xGBAEDpAmNmxg"
=======
        "versionLogicalId": "ConnectHandlerLambdaVersionGyQ0tPzfN2QhhA5GCzzDnT76IB1na9sLQSq2v4EjAqU"
      },
      "disconnectHandler": {
        "handler": "src/handler.disconnectHandler",
        "events": [
          {
            "websocket": "$disconnect"
          }
        ],
        "name": "madcamp3-dev-disconnectHandler",
        "package": {
          "artifact": ".serverless/madcamp3.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DisconnectHandlerLambdaVersionw9ttE08sUPcyqgOrc63itmVbeyKLAuTNH8IdQoo2UM"
      },
      "offerHandler": {
        "handler": "src/handler.offerHandler",
        "events": [
          {
            "websocket": {
              "route": "offer"
            }
          }
        ],
        "name": "madcamp3-dev-offerHandler",
        "package": {
          "artifact": ".serverless/madcamp3.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "OfferHandlerLambdaVersionotJ8LNqYe6FdQ78odv6ZFe0SCVpnM6lIEqHxEDCYSM"
      },
      "answerHandler": {
        "handler": "src/handler.answerHandler",
        "events": [
          {
            "websocket": {
              "route": "answer"
            }
          }
        ],
        "name": "madcamp3-dev-answerHandler",
        "package": {
          "artifact": ".serverless/madcamp3.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "AnswerHandlerLambdaVersionbjMfJwxcDt0lZzR48XoX1moRuUQUP7GgXcbIwYEXM"
>>>>>>> master
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "madcamp3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "package": {
        "exclude": [
          "node_modules/**",
          "test/**",
          "src/**/*.spec.ts",
          "src/**/*.test.ts"
        ],
        "artifactsS3KeyDirname": "serverless/madcamp3/dev/code-artifacts",
<<<<<<< HEAD
        "artifactDirectoryName": "serverless/madcamp3/dev/1720840560315-2024-07-13T03:16:00.315Z"
=======
        "artifactDirectoryName": "serverless/madcamp3/dev/1720844593027-2024-07-13T04:23:13.027Z"
>>>>>>> master
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
<<<<<<< HEAD
    "artifactDirectoryName": "serverless/madcamp3/dev/1720840560315-2024-07-13T03:16:00.315Z",
=======
    "artifactDirectoryName": "serverless/madcamp3/dev/1720844593027-2024-07-13T04:23:13.027Z",
>>>>>>> master
    "artifact": ""
  }
}