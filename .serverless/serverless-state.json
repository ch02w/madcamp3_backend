{
  "service": {
    "service": "madcampHttpApi",
    "serviceObject": {
      "name": "madcampHttpApi"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "ap-northeast-2",
      "environment": {
        "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
        "DB_USER": "admin",
        "DB_PASSWORD": "madcamp3",
        "DB_NAME": "madcamp3",
        "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
        "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
      },
      "vpc": {
        "securityGroupIds": [
          "sg-0bd76336ac022c789"
        ],
        "subnetIds": [
          "subnet-001a15c2ef77a9373",
          "subnet-02e6087dc234cade6",
          "subnet-022aff2afd3d4b04c",
          "subnet-0ba52e4d4989dc7cd",
          "subnet-0f1711463d45b9403",
          "subnet-0f4be7b9141369908"
        ]
      },
      "iam": {
        "role": "arn:aws:iam::730335448938:role/lambda-rds"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "KakaoLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-kakaoLogin"
            }
          },
          "GetAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getAllUsers"
            }
          },
          "GetUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getUserById"
            }
          },
          "ChangeUserInfoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-changeUserInfo"
            }
          },
          "GetAllOpenRoomsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getAllOpenRooms"
            }
          },
          "CreateRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-createRoom"
            }
          },
          "DeleteRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-deleteRoom"
            }
          },
          "CloseRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-closeRoom"
            }
          },
          "GetReservedSongsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getReservedSongs"
            }
          },
          "AddSongToRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-addSongToRoom"
            }
          },
          "UpdateSongStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-updateSongStatus"
            }
          },
          "CancelReservationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-cancelReservation"
            }
          },
          "GetFollowersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getFollowers"
            }
          },
          "GetFollowingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getFollowings"
            }
          },
          "FollowUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-followUser"
            }
          },
          "UnfollowUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-unfollowUser"
            }
          },
          "BlockFollowerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/madcampHttpApi-dev-blockFollower"
            }
          },
          "KakaoLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/login.kakao",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-kakaoLogin",
              "MemorySize": 1024,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "KakaoLoginLogGroup"
            ]
          },
          "GetAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/user.getAllUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-getAllUsers",
              "MemorySize": 1024,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetAllUsersLogGroup"
            ]
          },
          "GetUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/user.getUserById",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-getUserById",
              "MemorySize": 1024,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetUserByIdLogGroup"
            ]
          },
          "ChangeUserInfoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/user.changeUserInfo",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-changeUserInfo",
              "MemorySize": 1024,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "ChangeUserInfoLogGroup"
            ]
          },
          "GetAllOpenRoomsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/room.getAllOpenRooms",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-getAllOpenRooms",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetAllOpenRoomsLogGroup"
            ]
          },
          "CreateRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/room.createRoom",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-createRoom",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "CreateRoomLogGroup"
            ]
          },
          "DeleteRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/room.deleteRoom",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-deleteRoom",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "DeleteRoomLogGroup"
            ]
          },
          "CloseRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/room.closeRoom",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-closeRoom",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "CloseRoomLogGroup"
            ]
          },
          "GetReservedSongsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/roomSong.getReservedSongs",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-getReservedSongs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetReservedSongsLogGroup"
            ]
          },
          "AddSongToRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/roomSong.addSongToRoom",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-addSongToRoom",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "AddSongToRoomLogGroup"
            ]
          },
          "UpdateSongStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/roomSong.updateSongStatus",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-updateSongStatus",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "UpdateSongStatusLogGroup"
            ]
          },
          "CancelReservationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/roomSong.cancelReservation",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-cancelReservation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "CancelReservationLogGroup"
            ]
          },
          "GetFollowersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/friends.getFollowers",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-getFollowers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetFollowersLogGroup"
            ]
          },
          "GetFollowingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/friends.getFollowings",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-getFollowings",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetFollowingsLogGroup"
            ]
          },
          "FollowUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/friends.followUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-followUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "FollowUserLogGroup"
            ]
          },
          "UnfollowUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/friends.unfollowUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-unfollowUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "UnfollowUserLogGroup"
            ]
          },
          "BlockFollowerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
              },
              "Handler": "src/friends.blockFollower",
              "Runtime": "nodejs20.x",
              "FunctionName": "madcampHttpApi-dev-blockFollower",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
                  "DB_USER": "admin",
                  "DB_PASSWORD": "madcamp3",
                  "DB_NAME": "madcamp3",
                  "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
                  "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
                }
              },
              "Role": "arn:aws:iam::730335448938:role/lambda-rds",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "BlockFollowerLogGroup"
            ]
          },
          "KakaoLoginLambdaVersionHcI6ffGO2P61DZkfLvnyUGM8SAshPIFC7pPuphyE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "KakaoLoginLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "GetAllUsersLambdaVersionDbdLqus8ebqlHUAxwtCS6RnvVoH0WfRkMLwTiLk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUsersLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "GetUserByIdLambdaVersionLIJIDx25D7bwoqdmQduneoVZVDnx2T2dWNd4UrTlo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserByIdLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "ChangeUserInfoLambdaVersionMkZ8iBlFdgDQP8VNigLI1yZdzTgmD3QeENQCfCcc1og": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChangeUserInfoLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "GetAllOpenRoomsLambdaVersionzwIkpWSOod4XcAA368vFyauP2aKFB8TzaSJ27rEukZY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllOpenRoomsLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "CreateRoomLambdaVersion4raISiMymSJvIgfKmvPV3FaeTvxxto9AEJwIxcE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateRoomLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "DeleteRoomLambdaVersion4E4z62yUNJZA8gbmv98GbH3CywWh7o7GivwnM53c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteRoomLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "CloseRoomLambdaVersion6DKPZmjeccmQZQc42DtzDgbuRgUe5yr7deMGJLLtM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CloseRoomLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "GetReservedSongsLambdaVersionjpUZyAbf9fwzkSjujoqwDbVWM8mqr4Zw21QhxdIoxI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetReservedSongsLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "AddSongToRoomLambdaVersionc9xQyfDjLSHuxkD8MUTwsBPD6aolEjUn3tZkhKP82s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddSongToRoomLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "UpdateSongStatusLambdaVersionk9y6zadcupj6C97Vu43bSfDOYM4qPThW3IBBY7F3Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateSongStatusLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "CancelReservationLambdaVersionky1E4uKyE7MyqchuRRWp3vwxxaKnLmdL0hvvyXSbQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CancelReservationLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "GetFollowersLambdaVersionr2Uix2ywFBcwUkrpiwRablv4u4L8dkz0Bqsj27Ec": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFollowersLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "GetFollowingsLambdaVersionDFfXpkfcxd2EKXvOcIhP3jrFkICq8Wl1wQMjjFFqLm4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFollowingsLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "FollowUserLambdaVersionAxbni2P1DwVp22zh9lMwl5zBGAuJDPQBQbYYqvKUU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FollowUserLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "UnfollowUserLambdaVersionsEcqfnjU9HCy0PHgAbsKkWx5EcoaQrEURjj5YiBBtrA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UnfollowUserLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "BlockFollowerLambdaVersionBIZjJmRxLu3KS4zxgheAFkntgqqtZCD29RISbhzyE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BlockFollowerLambdaFunction"
              },
              "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-madcampHttpApi",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "KakaoLoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "KakaoLoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationKakaoLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"KakaoLoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetOauth": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /oauth",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationKakaoLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationKakaoLogin"
          },
          "GetAllUsersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllUsers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllUsersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUser": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /user",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllUsers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllUsers"
          },
          "GetUserByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUserById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUserByIdLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUserUseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /user/{userId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUserById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUserById"
          },
          "ChangeUserInfoLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChangeUserInfoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationChangeUserInfo": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ChangeUserInfoLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUserUseridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /user/{userId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationChangeUserInfo"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationChangeUserInfo"
          },
          "GetAllOpenRoomsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllOpenRoomsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllOpenRooms": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllOpenRoomsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetRoomOpen": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /room/open",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllOpenRooms"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllOpenRooms"
          },
          "CreateRoomLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateRoom": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateRoomLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostRoom": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /room",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateRoom"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateRoom"
          },
          "DeleteRoomLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteRoom": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteRoomLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteRoomRoomidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /room/{roomId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteRoom"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteRoom"
          },
          "CloseRoomLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CloseRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCloseRoom": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CloseRoomLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutRoomRoomidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /room/{roomId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCloseRoom"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCloseRoom"
          },
          "GetReservedSongsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetReservedSongsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetReservedSongs": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetReservedSongsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetRoomRoomidVarSong": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /room/{roomId}/song",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetReservedSongs"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetReservedSongs"
          },
          "AddSongToRoomLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddSongToRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAddSongToRoom": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddSongToRoomLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostRoomRoomidVarSong": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /room/{roomId}/song",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAddSongToRoom"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAddSongToRoom"
          },
          "UpdateSongStatusLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateSongStatusLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateSongStatus": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateSongStatusLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutRoomRoomidVarSongSongidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /room/{roomId}/song/{songId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateSongStatus"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateSongStatus"
          },
          "CancelReservationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CancelReservationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCancelReservation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CancelReservationLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteRoomRoomidVarSongSongidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /room/{roomId}/song/{songId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCancelReservation"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCancelReservation"
          },
          "GetFollowersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFollowersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetFollowers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetFollowersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetFriendsUseridVarFollower": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /friends/{userid}/follower",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetFollowers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetFollowers"
          },
          "GetFollowingsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFollowingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetFollowings": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetFollowingsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetFriendsUseridVarFollowing": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /friends/{userid}/following",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetFollowings"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetFollowings"
          },
          "FollowUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FollowUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationFollowUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FollowUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostFriendsUseridVarFollowing": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /friends/{userid}/following",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationFollowUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationFollowUser"
          },
          "UnfollowUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UnfollowUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUnfollowUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UnfollowUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteFriendsUseridVarUnfollowFollowingidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /friends/{userid}/unfollow/{following_id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUnfollowUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUnfollowUser"
          },
          "BlockFollowerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BlockFollowerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationBlockFollower": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BlockFollowerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteFriendsUseridVarBlockFolloweridVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /friends/{userid}/block/{followerId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationBlockFollower"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationBlockFollower"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-ServerlessDeploymentBucketName"
            }
          },
          "KakaoLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "KakaoLoginLambdaVersionHcI6ffGO2P61DZkfLvnyUGM8SAshPIFC7pPuphyE"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-KakaoLoginLambdaFunctionQualifiedArn"
            }
          },
          "GetAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUsersLambdaVersionDbdLqus8ebqlHUAxwtCS6RnvVoH0WfRkMLwTiLk"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-GetAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserByIdLambdaVersionLIJIDx25D7bwoqdmQduneoVZVDnx2T2dWNd4UrTlo"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-GetUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "ChangeUserInfoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChangeUserInfoLambdaVersionMkZ8iBlFdgDQP8VNigLI1yZdzTgmD3QeENQCfCcc1og"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-ChangeUserInfoLambdaFunctionQualifiedArn"
            }
          },
          "GetAllOpenRoomsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllOpenRoomsLambdaVersionzwIkpWSOod4XcAA368vFyauP2aKFB8TzaSJ27rEukZY"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-GetAllOpenRoomsLambdaFunctionQualifiedArn"
            }
          },
          "CreateRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateRoomLambdaVersion4raISiMymSJvIgfKmvPV3FaeTvxxto9AEJwIxcE"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-CreateRoomLambdaFunctionQualifiedArn"
            }
          },
          "DeleteRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteRoomLambdaVersion4E4z62yUNJZA8gbmv98GbH3CywWh7o7GivwnM53c"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-DeleteRoomLambdaFunctionQualifiedArn"
            }
          },
          "CloseRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CloseRoomLambdaVersion6DKPZmjeccmQZQc42DtzDgbuRgUe5yr7deMGJLLtM"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-CloseRoomLambdaFunctionQualifiedArn"
            }
          },
          "GetReservedSongsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetReservedSongsLambdaVersionjpUZyAbf9fwzkSjujoqwDbVWM8mqr4Zw21QhxdIoxI"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-GetReservedSongsLambdaFunctionQualifiedArn"
            }
          },
          "AddSongToRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddSongToRoomLambdaVersionc9xQyfDjLSHuxkD8MUTwsBPD6aolEjUn3tZkhKP82s"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-AddSongToRoomLambdaFunctionQualifiedArn"
            }
          },
          "UpdateSongStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateSongStatusLambdaVersionk9y6zadcupj6C97Vu43bSfDOYM4qPThW3IBBY7F3Q"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-UpdateSongStatusLambdaFunctionQualifiedArn"
            }
          },
          "CancelReservationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CancelReservationLambdaVersionky1E4uKyE7MyqchuRRWp3vwxxaKnLmdL0hvvyXSbQ"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-CancelReservationLambdaFunctionQualifiedArn"
            }
          },
          "GetFollowersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFollowersLambdaVersionr2Uix2ywFBcwUkrpiwRablv4u4L8dkz0Bqsj27Ec"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-GetFollowersLambdaFunctionQualifiedArn"
            }
          },
          "GetFollowingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFollowingsLambdaVersionDFfXpkfcxd2EKXvOcIhP3jrFkICq8Wl1wQMjjFFqLm4"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-GetFollowingsLambdaFunctionQualifiedArn"
            }
          },
          "FollowUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FollowUserLambdaVersionAxbni2P1DwVp22zh9lMwl5zBGAuJDPQBQbYYqvKUU"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-FollowUserLambdaFunctionQualifiedArn"
            }
          },
          "UnfollowUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UnfollowUserLambdaVersionsEcqfnjU9HCy0PHgAbsKkWx5EcoaQrEURjj5YiBBtrA"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-UnfollowUserLambdaFunctionQualifiedArn"
            }
          },
          "BlockFollowerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BlockFollowerLambdaVersionBIZjJmRxLu3KS4zxgheAFkntgqqtZCD29RISbhzyE"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-BlockFollowerLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-madcampHttpApi-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "webpack": {
        "webpackConfig": "./webpack.config.js",
        "includeModules": true
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-dotenv-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "kakaoLogin": {
        "handler": "src/login.kakao",
        "timeout": 10,
        "events": [
          {
            "httpApi": {
              "path": "/oauth",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/oauth"
          }
        ],
        "name": "madcampHttpApi-dev-kakaoLogin",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "KakaoLoginLambdaVersionHcI6ffGO2P61DZkfLvnyUGM8SAshPIFC7pPuphyE"
      },
      "getAllUsers": {
        "handler": "src/user.getAllUsers",
        "timeout": 10,
        "events": [
          {
            "httpApi": {
              "path": "/user",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/user"
          }
        ],
        "name": "madcampHttpApi-dev-getAllUsers",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetAllUsersLambdaVersionDbdLqus8ebqlHUAxwtCS6RnvVoH0WfRkMLwTiLk"
      },
      "getUserById": {
        "handler": "src/user.getUserById",
        "timeout": 10,
        "events": [
          {
            "httpApi": {
              "path": "/user/{userId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/user/{userId}"
          }
        ],
        "name": "madcampHttpApi-dev-getUserById",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetUserByIdLambdaVersionLIJIDx25D7bwoqdmQduneoVZVDnx2T2dWNd4UrTlo"
      },
      "changeUserInfo": {
        "handler": "src/user.changeUserInfo",
        "timeout": 10,
        "events": [
          {
            "httpApi": {
              "path": "/user/{userId}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/user/{userId}"
          }
        ],
        "name": "madcampHttpApi-dev-changeUserInfo",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ChangeUserInfoLambdaVersionMkZ8iBlFdgDQP8VNigLI1yZdzTgmD3QeENQCfCcc1og"
      },
      "getAllOpenRooms": {
        "handler": "src/room.getAllOpenRooms",
        "events": [
          {
            "httpApi": {
              "path": "/room/open",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/room/open"
          }
        ],
        "name": "madcampHttpApi-dev-getAllOpenRooms",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetAllOpenRoomsLambdaVersionzwIkpWSOod4XcAA368vFyauP2aKFB8TzaSJ27rEukZY"
      },
      "createRoom": {
        "handler": "src/room.createRoom",
        "events": [
          {
            "httpApi": {
              "path": "/room",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/room"
          }
        ],
        "name": "madcampHttpApi-dev-createRoom",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateRoomLambdaVersion4raISiMymSJvIgfKmvPV3FaeTvxxto9AEJwIxcE"
      },
      "deleteRoom": {
        "handler": "src/room.deleteRoom",
        "events": [
          {
            "httpApi": {
              "path": "/room/{roomId}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/room/{roomId}"
          }
        ],
        "name": "madcampHttpApi-dev-deleteRoom",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteRoomLambdaVersion4E4z62yUNJZA8gbmv98GbH3CywWh7o7GivwnM53c"
      },
      "closeRoom": {
        "handler": "src/room.closeRoom",
        "events": [
          {
            "httpApi": {
              "path": "/room/{roomId}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/room/{roomId}"
          }
        ],
        "name": "madcampHttpApi-dev-closeRoom",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CloseRoomLambdaVersion6DKPZmjeccmQZQc42DtzDgbuRgUe5yr7deMGJLLtM"
      },
      "getReservedSongs": {
        "handler": "src/roomSong.getReservedSongs",
        "events": [
          {
            "httpApi": {
              "path": "/room/{roomId}/song",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/room/{roomId}/song"
          }
        ],
        "name": "madcampHttpApi-dev-getReservedSongs",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetReservedSongsLambdaVersionjpUZyAbf9fwzkSjujoqwDbVWM8mqr4Zw21QhxdIoxI"
      },
      "addSongToRoom": {
        "handler": "src/roomSong.addSongToRoom",
        "events": [
          {
            "httpApi": {
              "path": "/room/{roomId}/song",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/room/{roomId}/song"
          }
        ],
        "name": "madcampHttpApi-dev-addSongToRoom",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "AddSongToRoomLambdaVersionc9xQyfDjLSHuxkD8MUTwsBPD6aolEjUn3tZkhKP82s"
      },
      "updateSongStatus": {
        "handler": "src/roomSong.updateSongStatus",
        "events": [
          {
            "httpApi": {
              "path": "/room/{roomId}/song/{songId}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/room/{roomId}/song/{songId}"
          }
        ],
        "name": "madcampHttpApi-dev-updateSongStatus",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateSongStatusLambdaVersionk9y6zadcupj6C97Vu43bSfDOYM4qPThW3IBBY7F3Q"
      },
      "cancelReservation": {
        "handler": "src/roomSong.cancelReservation",
        "events": [
          {
            "httpApi": {
              "path": "/room/{roomId}/song/{songId}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/room/{roomId}/song/{songId}"
          }
        ],
        "name": "madcampHttpApi-dev-cancelReservation",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CancelReservationLambdaVersionky1E4uKyE7MyqchuRRWp3vwxxaKnLmdL0hvvyXSbQ"
      },
      "getFollowers": {
        "handler": "src/friends.getFollowers",
        "events": [
          {
            "httpApi": {
              "path": "/friends/{userid}/follower",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/friends/{userid}/follower"
          }
        ],
        "name": "madcampHttpApi-dev-getFollowers",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetFollowersLambdaVersionr2Uix2ywFBcwUkrpiwRablv4u4L8dkz0Bqsj27Ec"
      },
      "getFollowings": {
        "handler": "src/friends.getFollowings",
        "events": [
          {
            "httpApi": {
              "path": "/friends/{userid}/following",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/friends/{userid}/following"
          }
        ],
        "name": "madcampHttpApi-dev-getFollowings",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetFollowingsLambdaVersionDFfXpkfcxd2EKXvOcIhP3jrFkICq8Wl1wQMjjFFqLm4"
      },
      "followUser": {
        "handler": "src/friends.followUser",
        "events": [
          {
            "httpApi": {
              "path": "/friends/{userid}/following",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/friends/{userid}/following"
          }
        ],
        "name": "madcampHttpApi-dev-followUser",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "FollowUserLambdaVersionAxbni2P1DwVp22zh9lMwl5zBGAuJDPQBQbYYqvKUU"
      },
      "unfollowUser": {
        "handler": "src/friends.unfollowUser",
        "events": [
          {
            "httpApi": {
              "path": "/friends/{userid}/unfollow/{following_id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/friends/{userid}/unfollow/{following_id}"
          }
        ],
        "name": "madcampHttpApi-dev-unfollowUser",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UnfollowUserLambdaVersionsEcqfnjU9HCy0PHgAbsKkWx5EcoaQrEURjj5YiBBtrA"
      },
      "blockFollower": {
        "handler": "src/friends.blockFollower",
        "events": [
          {
            "httpApi": {
              "path": "/friends/{userid}/block/{followerId}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/friends/{userid}/block/{followerId}"
          }
        ],
        "name": "madcampHttpApi-dev-blockFollower",
        "package": {
          "artifact": ".serverless\\madcampHttpApi.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "BlockFollowerLambdaVersionBIZjJmRxLu3KS4zxgheAFkntgqqtZCD29RISbhzyE"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "madcampHttpApi",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "package": {
        "exclude": [
          "node_modules/**",
          "test/**",
          "src/**/*.spec.ts",
          "src/**/*.test.ts"
        ],
        "artifactsS3KeyDirname": "serverless/madcampHttpApi/dev/code-artifacts",
        "artifactDirectoryName": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z",
    "artifact": ""
  }
}