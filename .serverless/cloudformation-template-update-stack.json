{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "KakaoLoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-kakaoLogin"
      }
    },
    "GetAllUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getAllUsers"
      }
    },
    "GetUserByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getUserById"
      }
    },
    "ChangeUserInfoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-changeUserInfo"
      }
    },
    "GetAllOpenRoomsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getAllOpenRooms"
      }
    },
    "CreateRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-createRoom"
      }
    },
    "DeleteRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-deleteRoom"
      }
    },
    "CloseRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-closeRoom"
      }
    },
    "EnterRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-enterRoom"
      }
    },
    "GetAllUsersInRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getAllUsersInRoom"
      }
    },
    "UpdateScoreLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-updateScore"
      }
    },
    "DeleteUserInRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-deleteUserInRoom"
      }
    },
    "GetRoomByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getRoomById"
      }
    },
    "GetUserScoreInRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getUserScoreInRoom"
      }
    },
    "GetFollowersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getFollowers"
      }
    },
    "GetFollowingsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getFollowings"
      }
    },
    "CheckFollowingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-checkFollowing"
      }
    },
    "FollowUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-followUser"
      }
    },
    "UnfollowUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-unfollowUser"
      }
    },
    "BlockFollowerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-blockFollower"
      }
    },
    "KakaoLoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/login.kakao",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-kakaoLogin",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "KakaoLoginLogGroup"
      ]
    },
    "GetAllUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/user.getAllUsers",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getAllUsers",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetAllUsersLogGroup"
      ]
    },
    "GetUserByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/user.getUserById",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getUserById",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetUserByIdLogGroup"
      ]
    },
    "ChangeUserInfoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/user.changeUserInfo",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-changeUserInfo",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "ChangeUserInfoLogGroup"
      ]
    },
    "GetAllOpenRoomsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.getAllOpenRooms",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getAllOpenRooms",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetAllOpenRoomsLogGroup"
      ]
    },
    "CreateRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.createRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-createRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "CreateRoomLogGroup"
      ]
    },
    "DeleteRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.deleteRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-deleteRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "DeleteRoomLogGroup"
      ]
    },
    "CloseRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.closeRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-closeRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "CloseRoomLogGroup"
      ]
    },
    "EnterRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.enterRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-enterRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "EnterRoomLogGroup"
      ]
    },
    "GetAllUsersInRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.getAllUsersInRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getAllUsersInRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetAllUsersInRoomLogGroup"
      ]
    },
    "UpdateScoreLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.updateScore",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-updateScore",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "UpdateScoreLogGroup"
      ]
    },
    "DeleteUserInRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.deleteUserInRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-deleteUserInRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "DeleteUserInRoomLogGroup"
      ]
    },
    "GetRoomByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.getRoomById",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getRoomById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetRoomByIdLogGroup"
      ]
    },
    "GetUserScoreInRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.getUserScoreInRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getUserScoreInRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetUserScoreInRoomLogGroup"
      ]
    },
    "GetFollowersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.getFollowers",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getFollowers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetFollowersLogGroup"
      ]
    },
    "GetFollowingsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.getFollowings",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getFollowings",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetFollowingsLogGroup"
      ]
    },
    "CheckFollowingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.checkFollowing",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-checkFollowing",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "CheckFollowingLogGroup"
      ]
    },
    "FollowUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.followUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-followUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "FollowUserLogGroup"
      ]
    },
    "UnfollowUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.unfollowUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-unfollowUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "UnfollowUserLogGroup"
      ]
    },
    "BlockFollowerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721157280755-2024-07-16T19:14:40.755Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.blockFollower",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-blockFollower",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "http://localhost:3000/kakao/callback"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "BlockFollowerLogGroup"
      ]
    },
    "KakaoLoginLambdaVersionpjdUvZsBR5n2gWg44NcAPNDUUnrDu9dVKiJIiEC3M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "KakaoLoginLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "GetAllUsersLambdaVersion8GFmMvjxC31otuufbZj3RSezXChdfKLAVrEUUuqobc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllUsersLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "GetUserByIdLambdaVersionOtbe8DVGDymaOza9YHhyzl9dKDACetAtkhuEq2VR5cc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserByIdLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "ChangeUserInfoLambdaVersionvHaJdms794RstlNOCMy3xKgtifQZWuGY8WJ1tq8DdBQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ChangeUserInfoLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "GetAllOpenRoomsLambdaVersionTgX9jMxLzh0HcULvJ8XSKuY39RlsEvodoK6zxX0z0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllOpenRoomsLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "CreateRoomLambdaVersionHDLgBAkT1dg6WM7KYZjck03CqYAx0WPwh0urYUMao": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateRoomLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "DeleteRoomLambdaVersionREgYJhet0DVNfV2Tp9CyyADeWnOpyMT4sBVDKEdu9QM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteRoomLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "CloseRoomLambdaVersionRey1z9OWXX9C7fyfFRuF3AJlmg72pA45WasoMP3JPOE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CloseRoomLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "EnterRoomLambdaVersionOBkKMJw2w4ha4ehM6MmxENiAremVuEsKGhirFJlw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EnterRoomLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "GetAllUsersInRoomLambdaVersiont4YY4IQNIPni44uTnNK7qeIdqaAG0gqaj3JbD4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllUsersInRoomLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "UpdateScoreLambdaVersion0rulAQbuoyLvfWxIxFQ2socCL7JiRHWMiTDQ18": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateScoreLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "DeleteUserInRoomLambdaVersionOX17KTHBoDA3E5wOcSEDirEFKG9KLdPKpzfF3XyQf0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteUserInRoomLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "GetRoomByIdLambdaVersion0MX9hx92PSM6nCY1v6K3SFe1GheAokFORWC31QTrM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetRoomByIdLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "GetUserScoreInRoomLambdaVersionQcTE71gJEOII3IAVwDKVqniYpomSLc82B3xOcO0qGo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserScoreInRoomLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "GetFollowersLambdaVersionXIcUSPnO7UuWeiAEEj47A58KbLinXMq6jZYad47Hasc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFollowersLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "GetFollowingsLambdaVersionitg4YJXHDieSa7m39tI0EnuJg9Q96aE8NS8DKFUh2S4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFollowingsLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "CheckFollowingLambdaVersion3W8ZbDrivNMlMggfPLTMTpJ2Vyhlp6NabnDp4QAH6o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CheckFollowingLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "FollowUserLambdaVersions6pMaKUAjA41hsw2bJqknEkqFsZZwRnakQDPdF9Ou4w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FollowUserLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "UnfollowUserLambdaVersion6F6ADYJacqHInQxebJqcfwvMwpZL4jMGAsjPsFHk4U": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UnfollowUserLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "BlockFollowerLambdaVersionfxluJgdYnPWLmDWDe9pe0C9N9SweWvkVOh7a6EeWA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BlockFollowerLambdaFunction"
        },
        "CodeSha256": "oyaFr8clg0jl/LqY4axv/6iyT0//cjrFEGhYcAh8QaQ="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-madcampHttpApi",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "KakaoLoginLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "KakaoLoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationKakaoLogin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "KakaoLoginLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetOauth": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /oauth",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationKakaoLogin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationKakaoLogin"
    },
    "GetAllUsersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllUsers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUser": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /user",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllUsers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllUsers"
    },
    "GetUserByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUserById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUserUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /user/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUserById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetUserById"
    },
    "ChangeUserInfoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ChangeUserInfoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationChangeUserInfo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ChangeUserInfoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUserUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /user/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationChangeUserInfo"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationChangeUserInfo"
    },
    "GetAllOpenRoomsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllOpenRoomsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllOpenRooms": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllOpenRoomsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetRoomOpen": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /room/open",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllOpenRooms"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllOpenRooms"
    },
    "CreateRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostRoom": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /room",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateRoom"
    },
    "DeleteRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteRoomRoomidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /room/{roomId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteRoom"
    },
    "CloseRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CloseRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCloseRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CloseRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutRoomRoomidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /room/{roomId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCloseRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCloseRoom"
    },
    "EnterRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EnterRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEnterRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EnterRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostRoomRoomidVarUser": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /room/{roomId}/user",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEnterRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEnterRoom"
    },
    "GetAllUsersInRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllUsersInRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllUsersInRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllUsersInRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetRoomRoomidVarUser": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /room/{roomId}/user",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllUsersInRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllUsersInRoom"
    },
    "UpdateScoreLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateScoreLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateScore": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateScoreLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutRoomRoomidVarUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /room/{roomId}/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateScore"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateScore"
    },
    "DeleteUserInRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteUserInRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteUserInRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteUserInRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteRoomRoomidVarUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /room/{roomId}/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteUserInRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteUserInRoom"
    },
    "GetRoomByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetRoomByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetRoomById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetRoomByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetRoomRoomidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /room/{roomId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetRoomById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetRoomById"
    },
    "GetUserScoreInRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserScoreInRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUserScoreInRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUserScoreInRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetRoomRoomidVarUseridVarScore": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /room/{roomId}/{userId}/score",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUserScoreInRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetUserScoreInRoom"
    },
    "GetFollowersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFollowersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetFollowers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetFollowersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetFriendsUseridVarFollower": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /friends/{userId}/follower",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetFollowers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetFollowers"
    },
    "GetFollowingsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFollowingsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetFollowings": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetFollowingsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetFriendsUseridVarFollowing": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /friends/{userId}/following",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetFollowings"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetFollowings"
    },
    "CheckFollowingLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CheckFollowingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCheckFollowing": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CheckFollowingLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetFriendsUseridVarTargetuseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /friends/{userId}/{targetUserId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCheckFollowing"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCheckFollowing"
    },
    "FollowUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FollowUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationFollowUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "FollowUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostFriendsUseridVarFollowing": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /friends/{userId}/following",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationFollowUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationFollowUser"
    },
    "UnfollowUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UnfollowUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUnfollowUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UnfollowUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteFriendsUseridVarUnfollowFollowingidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /friends/{userId}/unfollow/{followingId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUnfollowUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUnfollowUser"
    },
    "BlockFollowerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BlockFollowerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationBlockFollower": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "BlockFollowerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteFriendsUseridVarBlockFolloweridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /friends/{userId}/block/{followerId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationBlockFollower"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationBlockFollower"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-ServerlessDeploymentBucketName"
      }
    },
    "KakaoLoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "KakaoLoginLambdaVersionpjdUvZsBR5n2gWg44NcAPNDUUnrDu9dVKiJIiEC3M"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-KakaoLoginLambdaFunctionQualifiedArn"
      }
    },
    "GetAllUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllUsersLambdaVersion8GFmMvjxC31otuufbZj3RSezXChdfKLAVrEUUuqobc"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetAllUsersLambdaFunctionQualifiedArn"
      }
    },
    "GetUserByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserByIdLambdaVersionOtbe8DVGDymaOza9YHhyzl9dKDACetAtkhuEq2VR5cc"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetUserByIdLambdaFunctionQualifiedArn"
      }
    },
    "ChangeUserInfoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ChangeUserInfoLambdaVersionvHaJdms794RstlNOCMy3xKgtifQZWuGY8WJ1tq8DdBQ"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-ChangeUserInfoLambdaFunctionQualifiedArn"
      }
    },
    "GetAllOpenRoomsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllOpenRoomsLambdaVersionTgX9jMxLzh0HcULvJ8XSKuY39RlsEvodoK6zxX0z0"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetAllOpenRoomsLambdaFunctionQualifiedArn"
      }
    },
    "CreateRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateRoomLambdaVersionHDLgBAkT1dg6WM7KYZjck03CqYAx0WPwh0urYUMao"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-CreateRoomLambdaFunctionQualifiedArn"
      }
    },
    "DeleteRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteRoomLambdaVersionREgYJhet0DVNfV2Tp9CyyADeWnOpyMT4sBVDKEdu9QM"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-DeleteRoomLambdaFunctionQualifiedArn"
      }
    },
    "CloseRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CloseRoomLambdaVersionRey1z9OWXX9C7fyfFRuF3AJlmg72pA45WasoMP3JPOE"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-CloseRoomLambdaFunctionQualifiedArn"
      }
    },
    "EnterRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EnterRoomLambdaVersionOBkKMJw2w4ha4ehM6MmxENiAremVuEsKGhirFJlw"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-EnterRoomLambdaFunctionQualifiedArn"
      }
    },
    "GetAllUsersInRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllUsersInRoomLambdaVersiont4YY4IQNIPni44uTnNK7qeIdqaAG0gqaj3JbD4"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetAllUsersInRoomLambdaFunctionQualifiedArn"
      }
    },
    "UpdateScoreLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateScoreLambdaVersion0rulAQbuoyLvfWxIxFQ2socCL7JiRHWMiTDQ18"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-UpdateScoreLambdaFunctionQualifiedArn"
      }
    },
    "DeleteUserInRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteUserInRoomLambdaVersionOX17KTHBoDA3E5wOcSEDirEFKG9KLdPKpzfF3XyQf0"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-DeleteUserInRoomLambdaFunctionQualifiedArn"
      }
    },
    "GetRoomByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetRoomByIdLambdaVersion0MX9hx92PSM6nCY1v6K3SFe1GheAokFORWC31QTrM"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetRoomByIdLambdaFunctionQualifiedArn"
      }
    },
    "GetUserScoreInRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserScoreInRoomLambdaVersionQcTE71gJEOII3IAVwDKVqniYpomSLc82B3xOcO0qGo"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetUserScoreInRoomLambdaFunctionQualifiedArn"
      }
    },
    "GetFollowersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFollowersLambdaVersionXIcUSPnO7UuWeiAEEj47A58KbLinXMq6jZYad47Hasc"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetFollowersLambdaFunctionQualifiedArn"
      }
    },
    "GetFollowingsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFollowingsLambdaVersionitg4YJXHDieSa7m39tI0EnuJg9Q96aE8NS8DKFUh2S4"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetFollowingsLambdaFunctionQualifiedArn"
      }
    },
    "CheckFollowingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CheckFollowingLambdaVersion3W8ZbDrivNMlMggfPLTMTpJ2Vyhlp6NabnDp4QAH6o"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-CheckFollowingLambdaFunctionQualifiedArn"
      }
    },
    "FollowUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FollowUserLambdaVersions6pMaKUAjA41hsw2bJqknEkqFsZZwRnakQDPdF9Ou4w"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-FollowUserLambdaFunctionQualifiedArn"
      }
    },
    "UnfollowUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UnfollowUserLambdaVersion6F6ADYJacqHInQxebJqcfwvMwpZL4jMGAsjPsFHk4U"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-UnfollowUserLambdaFunctionQualifiedArn"
      }
    },
    "BlockFollowerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BlockFollowerLambdaVersionfxluJgdYnPWLmDWDe9pe0C9N9SweWvkVOh7a6EeWA"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-BlockFollowerLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-HttpApiUrl"
      }
    }
  }
}