{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "KakaoLoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-kakaoLogin"
      }
    },
    "GetAllUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getAllUsers"
      }
    },
    "GetUserByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getUserById"
      }
    },
    "ChangeUserInfoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-changeUserInfo"
      }
    },
    "GetAllOpenRoomsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getAllOpenRooms"
      }
    },
    "CreateRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-createRoom"
      }
    },
    "DeleteRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-deleteRoom"
      }
    },
    "CloseRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-closeRoom"
      }
    },
    "GetReservedSongsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getReservedSongs"
      }
    },
    "AddSongToRoomLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-addSongToRoom"
      }
    },
    "UpdateSongStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-updateSongStatus"
      }
    },
    "CancelReservationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-cancelReservation"
      }
    },
    "GetFollowersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getFollowers"
      }
    },
    "GetFollowingsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-getFollowings"
      }
    },
    "FollowUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-followUser"
      }
    },
    "UnfollowUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-unfollowUser"
      }
    },
    "BlockFollowerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/madcampHttpApi-dev-blockFollower"
      }
    },
    "KakaoLoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/login.kakao",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-kakaoLogin",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "KakaoLoginLogGroup"
      ]
    },
    "GetAllUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/user.getAllUsers",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getAllUsers",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetAllUsersLogGroup"
      ]
    },
    "GetUserByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/user.getUserById",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getUserById",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetUserByIdLogGroup"
      ]
    },
    "ChangeUserInfoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/user.changeUserInfo",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-changeUserInfo",
        "MemorySize": 1024,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "ChangeUserInfoLogGroup"
      ]
    },
    "GetAllOpenRoomsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.getAllOpenRooms",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getAllOpenRooms",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetAllOpenRoomsLogGroup"
      ]
    },
    "CreateRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.createRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-createRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "CreateRoomLogGroup"
      ]
    },
    "DeleteRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.deleteRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-deleteRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "DeleteRoomLogGroup"
      ]
    },
    "CloseRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/room.closeRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-closeRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "CloseRoomLogGroup"
      ]
    },
    "GetReservedSongsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/roomSong.getReservedSongs",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getReservedSongs",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetReservedSongsLogGroup"
      ]
    },
    "AddSongToRoomLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/roomSong.addSongToRoom",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-addSongToRoom",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "AddSongToRoomLogGroup"
      ]
    },
    "UpdateSongStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/roomSong.updateSongStatus",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-updateSongStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "UpdateSongStatusLogGroup"
      ]
    },
    "CancelReservationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/roomSong.cancelReservation",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-cancelReservation",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "CancelReservationLogGroup"
      ]
    },
    "GetFollowersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.getFollowers",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getFollowers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetFollowersLogGroup"
      ]
    },
    "GetFollowingsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.getFollowings",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-getFollowings",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "GetFollowingsLogGroup"
      ]
    },
    "FollowUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.followUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-followUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "FollowUserLogGroup"
      ]
    },
    "UnfollowUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.unfollowUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-unfollowUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "UnfollowUserLogGroup"
      ]
    },
    "BlockFollowerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/madcampHttpApi/dev/1721042355011-2024-07-15T11:19:15.011Z/madcampHttpApi.zip"
        },
        "Handler": "src/friends.blockFollower",
        "Runtime": "nodejs20.x",
        "FunctionName": "madcampHttpApi-dev-blockFollower",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DB_HOST": "madcamp3.c5uqkm8isex8.ap-northeast-2.rds.amazonaws.com",
            "DB_USER": "admin",
            "DB_PASSWORD": "madcamp3",
            "DB_NAME": "madcamp3",
            "KAKAO_API_KEY": "f6cd63eaf3ea52e89ff8978fd1f187d4",
            "KAKAO_REDIRECT_URI": "https://is4r2vru75.execute-api.ap-northeast-2.amazonaws.com/oauth"
          }
        },
        "Role": "arn:aws:iam::730335448938:role/lambda-rds",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-0bd76336ac022c789"
          ],
          "SubnetIds": [
            "subnet-001a15c2ef77a9373",
            "subnet-02e6087dc234cade6",
            "subnet-022aff2afd3d4b04c",
            "subnet-0ba52e4d4989dc7cd",
            "subnet-0f1711463d45b9403",
            "subnet-0f4be7b9141369908"
          ]
        }
      },
      "DependsOn": [
        "BlockFollowerLogGroup"
      ]
    },
    "KakaoLoginLambdaVersionHcI6ffGO2P61DZkfLvnyUGM8SAshPIFC7pPuphyE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "KakaoLoginLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "GetAllUsersLambdaVersionDbdLqus8ebqlHUAxwtCS6RnvVoH0WfRkMLwTiLk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllUsersLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "GetUserByIdLambdaVersionLIJIDx25D7bwoqdmQduneoVZVDnx2T2dWNd4UrTlo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserByIdLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "ChangeUserInfoLambdaVersionMkZ8iBlFdgDQP8VNigLI1yZdzTgmD3QeENQCfCcc1og": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ChangeUserInfoLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "GetAllOpenRoomsLambdaVersionzwIkpWSOod4XcAA368vFyauP2aKFB8TzaSJ27rEukZY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllOpenRoomsLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "CreateRoomLambdaVersion4raISiMymSJvIgfKmvPV3FaeTvxxto9AEJwIxcE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateRoomLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "DeleteRoomLambdaVersion4E4z62yUNJZA8gbmv98GbH3CywWh7o7GivwnM53c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteRoomLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "CloseRoomLambdaVersion6DKPZmjeccmQZQc42DtzDgbuRgUe5yr7deMGJLLtM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CloseRoomLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "GetReservedSongsLambdaVersionjpUZyAbf9fwzkSjujoqwDbVWM8mqr4Zw21QhxdIoxI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetReservedSongsLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "AddSongToRoomLambdaVersionc9xQyfDjLSHuxkD8MUTwsBPD6aolEjUn3tZkhKP82s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddSongToRoomLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "UpdateSongStatusLambdaVersionk9y6zadcupj6C97Vu43bSfDOYM4qPThW3IBBY7F3Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateSongStatusLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "CancelReservationLambdaVersionky1E4uKyE7MyqchuRRWp3vwxxaKnLmdL0hvvyXSbQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CancelReservationLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "GetFollowersLambdaVersionr2Uix2ywFBcwUkrpiwRablv4u4L8dkz0Bqsj27Ec": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFollowersLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "GetFollowingsLambdaVersionDFfXpkfcxd2EKXvOcIhP3jrFkICq8Wl1wQMjjFFqLm4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFollowingsLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "FollowUserLambdaVersionAxbni2P1DwVp22zh9lMwl5zBGAuJDPQBQbYYqvKUU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FollowUserLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "UnfollowUserLambdaVersionsEcqfnjU9HCy0PHgAbsKkWx5EcoaQrEURjj5YiBBtrA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UnfollowUserLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "BlockFollowerLambdaVersionBIZjJmRxLu3KS4zxgheAFkntgqqtZCD29RISbhzyE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BlockFollowerLambdaFunction"
        },
        "CodeSha256": "6dTmS3o5iBbnjBD6C+v1s0Wn0jTGr/Z9SqNU9o6m8PQ="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-madcampHttpApi",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "KakaoLoginLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "KakaoLoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationKakaoLogin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "KakaoLoginLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetOauth": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /oauth",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationKakaoLogin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationKakaoLogin"
    },
    "GetAllUsersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllUsers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUser": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /user",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllUsers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllUsers"
    },
    "GetUserByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUserById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUserByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUserUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /user/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUserById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetUserById"
    },
    "ChangeUserInfoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ChangeUserInfoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationChangeUserInfo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ChangeUserInfoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUserUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /user/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationChangeUserInfo"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationChangeUserInfo"
    },
    "GetAllOpenRoomsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllOpenRoomsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllOpenRooms": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllOpenRoomsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetRoomOpen": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /room/open",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllOpenRooms"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllOpenRooms"
    },
    "CreateRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostRoom": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /room",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateRoom"
    },
    "DeleteRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteRoomRoomidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /room/{roomId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteRoom"
    },
    "CloseRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CloseRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCloseRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CloseRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutRoomRoomidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /room/{roomId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCloseRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCloseRoom"
    },
    "GetReservedSongsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetReservedSongsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetReservedSongs": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetReservedSongsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetRoomRoomidVarSong": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /room/{roomId}/song",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetReservedSongs"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetReservedSongs"
    },
    "AddSongToRoomLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddSongToRoomLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAddSongToRoom": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AddSongToRoomLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostRoomRoomidVarSong": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /room/{roomId}/song",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAddSongToRoom"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAddSongToRoom"
    },
    "UpdateSongStatusLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateSongStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateSongStatus": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateSongStatusLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutRoomRoomidVarSongSongidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /room/{roomId}/song/{songId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateSongStatus"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateSongStatus"
    },
    "CancelReservationLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CancelReservationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCancelReservation": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CancelReservationLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteRoomRoomidVarSongSongidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /room/{roomId}/song/{songId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCancelReservation"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCancelReservation"
    },
    "GetFollowersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFollowersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetFollowers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetFollowersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetFriendsUseridVarFollower": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /friends/{userid}/follower",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetFollowers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetFollowers"
    },
    "GetFollowingsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFollowingsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetFollowings": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetFollowingsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetFriendsUseridVarFollowing": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /friends/{userid}/following",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetFollowings"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetFollowings"
    },
    "FollowUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "FollowUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationFollowUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "FollowUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostFriendsUseridVarFollowing": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /friends/{userid}/following",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationFollowUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationFollowUser"
    },
    "UnfollowUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UnfollowUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUnfollowUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UnfollowUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteFriendsUseridVarUnfollowFollowingidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /friends/{userid}/unfollow/{following_id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUnfollowUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUnfollowUser"
    },
    "BlockFollowerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BlockFollowerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationBlockFollower": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "BlockFollowerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteFriendsUseridVarBlockFolloweridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /friends/{userid}/block/{followerId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationBlockFollower"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationBlockFollower"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-ServerlessDeploymentBucketName"
      }
    },
    "KakaoLoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "KakaoLoginLambdaVersionHcI6ffGO2P61DZkfLvnyUGM8SAshPIFC7pPuphyE"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-KakaoLoginLambdaFunctionQualifiedArn"
      }
    },
    "GetAllUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllUsersLambdaVersionDbdLqus8ebqlHUAxwtCS6RnvVoH0WfRkMLwTiLk"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetAllUsersLambdaFunctionQualifiedArn"
      }
    },
    "GetUserByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserByIdLambdaVersionLIJIDx25D7bwoqdmQduneoVZVDnx2T2dWNd4UrTlo"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetUserByIdLambdaFunctionQualifiedArn"
      }
    },
    "ChangeUserInfoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ChangeUserInfoLambdaVersionMkZ8iBlFdgDQP8VNigLI1yZdzTgmD3QeENQCfCcc1og"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-ChangeUserInfoLambdaFunctionQualifiedArn"
      }
    },
    "GetAllOpenRoomsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllOpenRoomsLambdaVersionzwIkpWSOod4XcAA368vFyauP2aKFB8TzaSJ27rEukZY"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetAllOpenRoomsLambdaFunctionQualifiedArn"
      }
    },
    "CreateRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateRoomLambdaVersion4raISiMymSJvIgfKmvPV3FaeTvxxto9AEJwIxcE"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-CreateRoomLambdaFunctionQualifiedArn"
      }
    },
    "DeleteRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteRoomLambdaVersion4E4z62yUNJZA8gbmv98GbH3CywWh7o7GivwnM53c"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-DeleteRoomLambdaFunctionQualifiedArn"
      }
    },
    "CloseRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CloseRoomLambdaVersion6DKPZmjeccmQZQc42DtzDgbuRgUe5yr7deMGJLLtM"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-CloseRoomLambdaFunctionQualifiedArn"
      }
    },
    "GetReservedSongsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetReservedSongsLambdaVersionjpUZyAbf9fwzkSjujoqwDbVWM8mqr4Zw21QhxdIoxI"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetReservedSongsLambdaFunctionQualifiedArn"
      }
    },
    "AddSongToRoomLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddSongToRoomLambdaVersionc9xQyfDjLSHuxkD8MUTwsBPD6aolEjUn3tZkhKP82s"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-AddSongToRoomLambdaFunctionQualifiedArn"
      }
    },
    "UpdateSongStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateSongStatusLambdaVersionk9y6zadcupj6C97Vu43bSfDOYM4qPThW3IBBY7F3Q"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-UpdateSongStatusLambdaFunctionQualifiedArn"
      }
    },
    "CancelReservationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CancelReservationLambdaVersionky1E4uKyE7MyqchuRRWp3vwxxaKnLmdL0hvvyXSbQ"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-CancelReservationLambdaFunctionQualifiedArn"
      }
    },
    "GetFollowersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFollowersLambdaVersionr2Uix2ywFBcwUkrpiwRablv4u4L8dkz0Bqsj27Ec"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetFollowersLambdaFunctionQualifiedArn"
      }
    },
    "GetFollowingsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFollowingsLambdaVersionDFfXpkfcxd2EKXvOcIhP3jrFkICq8Wl1wQMjjFFqLm4"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-GetFollowingsLambdaFunctionQualifiedArn"
      }
    },
    "FollowUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "FollowUserLambdaVersionAxbni2P1DwVp22zh9lMwl5zBGAuJDPQBQbYYqvKUU"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-FollowUserLambdaFunctionQualifiedArn"
      }
    },
    "UnfollowUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UnfollowUserLambdaVersionsEcqfnjU9HCy0PHgAbsKkWx5EcoaQrEURjj5YiBBtrA"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-UnfollowUserLambdaFunctionQualifiedArn"
      }
    },
    "BlockFollowerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BlockFollowerLambdaVersionBIZjJmRxLu3KS4zxgheAFkntgqqtZCD29RISbhzyE"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-BlockFollowerLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-madcampHttpApi-dev-HttpApiUrl"
      }
    }
  }
}