service: madcamp31

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-northeast-2
  environment:
    DB_HOST: env:DB_HOST
    DB_USER: env:DB_USER
    DB_PASSWORD: env:DB_PASSWORD
    DB_NAME: env:DB_NAME
    KAKAO_API_KEY: env:KAKAO_API_KEY
    KAKAO_REDIRECT_URI: env:KAKAO_REDIRECT_URI

  vpc: # kinda 서버
    securityGroupIds:
      - sg-0bd76336ac022c789
    subnetIds:
      - subnet-001a15c2ef77a9373
      - subnet-02e6087dc234cade6
      - subnet-022aff2afd3d4b04c
      - subnet-0ba52e4d4989dc7cd
      - subnet-0f1711463d45b9403
      - subnet-0f4be7b9141369908
  iam:
    role: arn:aws:iam::730335448938:role/lambda-rds

# -- 위쪽 건들 ㄴㄴ
functions:
#  kakaoLogin:
#    handler: src/login.kakao
#    events:
#      - http:
#          path: oauth
#          method: get
#          cors: true

  getAllUsers:
    handler: src/user.getAllUsers
    timeout: 10
    events:
      - http:
          path: user
          method: get
          cors: true

  getUserById:
    handler: src/user.getUserById
    timeout: 10
    events:
      - http:
          path: user/{userId}
          method: get
          cors: true

  changeUserInfo:
    handler: src/user.changeUserInfo
    timeout: 10
    events:
      - http:
          path: user/{userId}
          method: put
          cors: true

  getAllOpenRooms:
    handler: src/room.getAllOpenRooms
    events:
      - http:
          path: room/open
          method: get
          cors: true

  createRoom:
    handler: src/room.createRoom
    events:
      - http:
          path: room
          method: post
          cors: true

  deleteRoom:
    handler: src/room.deleteRoom
    events:
      - http:
          path: room/{roomId}
          method: delete
          cors: true

  closeRoom:
    handler: src/room.closeRoom
    events:
      - http:
          path: room/{roomId}
          method: put
          cors: true

  getReservedSongs:
    handler: src/roomSong.getReservedSongs
    events:
      - http:
          path: room/{roomId}/song
          method: get
          cors: true

  addSongToRoom:
    handler: src/roomSong.addSongToRoom
    events:
      - http:
          path: room/{roomId}/song
          method: post
          cors: true

  updateSongStatus:
    handler: src/roomSong.updateSongStatus
    events:
      - http:
          path: room/{roomId}/song/{songId}
          method: put
          cors: true

  cancelReservation:
    handler: src/roomSong.cancelReservation
    events:
      - http:
          path: room/{roomId}/song/{songId}
          method: delete
          cors: true

  getFollowers:
    handler: src/friends.getFollowers
    events:
      - http:
          path: /friends/{userid}/follower
          method: get
          cors: true

  getFollowings:
    handler: src/friends.getFollowings
    events:
      - http:
          path: /friends/{userid}/following
          method: get
          cors: true

  followUser:
    handler: src/friends.followUser
    events:
      - http:
          path: /friends/{userid}/following
          method: post
          cors: true

  unfollowUser:
    handler: src/friends.unfollowUser
    events:
      - http:
          path: /friends/{userid}/unfollow/{following_id}
          method: delete
          cors: true

  blockFollower:
    handler: src/friends.blockFollower
    events:
      - http:
          path: /friends/{userid}/block/{followerId}
          method: delete
          cors: true

package:
  exclude:
    - node_modules/**
    - test/**
    - src/**/*.spec.ts
    - src/**/*.test.ts

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  cors:
    origins:
      - '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: false

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          'gatewayresponse.header.Access-Control-Allow-Origin': "'*'"
          'gatewayresponse.header.Access-Control-Allow-Headers': "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          'gatewayresponse.header.Access-Control-Allow-Origin': "'*'"
          'gatewayresponse.header.Access-Control-Allow-Headers': "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'